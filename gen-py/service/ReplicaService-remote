#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.19.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from service import ReplicaService
from service.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  Response readFile(string filename)')
    print('  Response writeFile(string filename, string clientFilePath)')
    print('   listFiles()')
    print('  FileChunk getFileChunk(string filename, i32 offset, i32 chunkSize)')
    print('  i64 getFileSize(string filename)')
    print('  i32 getFileVersion(string filename)')
    print('  Response updateFile(string filename, i32 version)')
    print('  Response copyFile(string filename, string sourceReplica)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = ReplicaService.Client(protocol)
transport.open()

if cmd == 'readFile':
    if len(args) != 1:
        print('readFile requires 1 args')
        sys.exit(1)
    pp.pprint(client.readFile(args[0],))

elif cmd == 'writeFile':
    if len(args) != 2:
        print('writeFile requires 2 args')
        sys.exit(1)
    pp.pprint(client.writeFile(args[0], args[1],))

elif cmd == 'listFiles':
    if len(args) != 0:
        print('listFiles requires 0 args')
        sys.exit(1)
    pp.pprint(client.listFiles())

elif cmd == 'getFileChunk':
    if len(args) != 3:
        print('getFileChunk requires 3 args')
        sys.exit(1)
    pp.pprint(client.getFileChunk(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'getFileSize':
    if len(args) != 1:
        print('getFileSize requires 1 args')
        sys.exit(1)
    pp.pprint(client.getFileSize(args[0],))

elif cmd == 'getFileVersion':
    if len(args) != 1:
        print('getFileVersion requires 1 args')
        sys.exit(1)
    pp.pprint(client.getFileVersion(args[0],))

elif cmd == 'updateFile':
    if len(args) != 2:
        print('updateFile requires 2 args')
        sys.exit(1)
    pp.pprint(client.updateFile(args[0], eval(args[1]),))

elif cmd == 'copyFile':
    if len(args) != 2:
        print('copyFile requires 2 args')
        sys.exit(1)
    pp.pprint(client.copyFile(args[0], args[1],))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
